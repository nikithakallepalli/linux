Team Members:
Nikitha Kallepalli  - 015355977
Lakshmi Gundlapalli - 015241122

Assignment Source Code: https://github.com/nikithakallepalli/linux/tree/master/cmpe283

Nikitha - 

-Installed VMware Workstation and created a VM with Ubuntu OS with 8 processors and 6GB RAM.
-Then mounted Ubuntu 20.4 iso image to the VM and then installed the Ubuntu Operating system in VMware Workstation.
-Enabled  the nested VM capability feature for the virtual Machine.
-Then, forked the  linux repsoitory from torvalds and then cloned the linux repository.
-Then, Built the latest linux source code 5.15.0+ version succesfully. 
-Once the kernal source code is built, I have added the code for entry based and secondary processor based structure and controls to print the messages for secondary proc based and entry based controls.

Lakshmi

-Installed VMware Workstation and created a VM with Ubuntu OS with 4 processors and 6GB RAM.
-Installed the necessary Devtools required to build, and run the linux source code.
-Installed the succesfully built linux source code into the already running 5.11 version Ubuntu VM to update it to 5.15.0+ version. 
-After running makefile to obtain output for pin based controls, proceeded with appending Exit based controls in detect_vmx_features, and structure definition code for exit based controls and primary processor based  controls, and structure definition.
-After succesful completion of merging the code re-inserted the updated kernel module again to the linux kernel code and verified the print message.
 
Execution Steps for OUTPUT:
-cd linux/cpme283
-make clean
-make 
-ls *.ko
-sudo rmmod cmpe283-1.ko
-sudo insmod cmpe283-1.ko
-dmesg
-when dmesg command is executed it gives the features information of all the pin based, primary proc based, secondary proc based, entry and exit controls.


Execution Steps for linux source code build and installation:
-git clone https://github.com/nikithakallepalli/linux.git
-cd linux
-git status
-git remote -v
-uname -a
-cp /boot/config-5.11.0-38-generic .config
-make prepare
-cd ..
-make -j 4 modules
-make -j 4
-sudo make INSTALL_MOD_STRIP=1 modules_install
-sude make install
-reboot

Steps to intsall the dependencies:
sudo apt install git
sudo apt install make
sudo apt install gcc
sudo apt install flex
sudo apt install bison
sudo apt-get install libssl-dev
sudo apt-get install libelf-dev

